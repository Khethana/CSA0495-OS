#include <stdio.h>
#define MAX 100
int findOptimal(int pages[], int frame[], int n, int capacity, int index) {
    int farthest = index, pos = -1;
    for (int i = 0; i < capacity; i++) {
        int j;
        for (j = index; j < n; j++) {
            if (frame[i] == pages[j]) {
                if (j > farthest) {
                    farthest = j;
                    pos = i;
                }
                break;
            }
        }
        if (j == n)
            return i;
    }
    return (pos == -1) ? 0 : pos;
}
void Optimal(int pages[], int n, int capacity) {
    int frame[capacity], pageFaults = 0;
    for (int i = 0; i < capacity; i++)
        frame[i] = -1;
    for (int i = 0; i < n; i++) {
        int found = 0;
        for (int j = 0; j < capacity; j++) {
            if (frame[j] == pages[i]) {
                found = 1;
                break;
            }
        }
        if (!found) {
            int pos;
            if (i < capacity)
                pos = i;
            else
                pos = findOptimal(pages, frame, n, capacity, i + 1);
            frame[pos] = pages[i];
            pageFaults++;
        }
        printf("Frame: ");
        for (int j = 0; j < capacity; j++)
            printf("%d ", frame[j]);
        printf("\n");
    }
    printf("Total Page Faults: %d\n", pageFaults);
}
int main() {
    int pages[] = {1, 3, 0, 3, 5, 6, 3};
    int n = sizeof(pages) / sizeof(pages[0]);
    int capacity = 3;
    Optimal(pages, n, capacity);
    return 0;
}